server:
  port: 9000

spring:
  application:
    name: api-gateway
  config:
    import: "optional:classpath:application-secrets.properties"
  cloud:
    gateway:
      routes:
        - id: ai-service-local
          uri: http://localhost:9000 # Route to the gateway itself
          predicates:
            - Path=/api/ai/**

        - id: auth-service
          uri: lb://AUTH-SERVICE
          predicates:
            - Path=/api/auth/**, /api/users/**

        - id: user-profile-service
          uri: lb://USER-PROFILE-SERVICE
          predicates:
            - Path=/api/profiles/**, /api/specialities/**, /api/doctors/**,  /api/reviews/**

        - id: consultation-service
          uri: lb://CONSULTATION-SERVICE
          predicates:
            - Path=/api/consultations/**

        - id: notification-service
          uri: lb://NOTIFICATION-SERVICE
          predicates:
            - Path=/api/notifications/**

        - id: payment-service
          uri: lb://PAYMENT-SERVICE
          predicates:
            - Path=/api/payments/**

        - id: chat-service-websocket
          # This is the new approach. We use the HTTP scheme for discovery...
          uri: lb://CHAT-SERVICE
          predicates:
            - Path=/ws/**
          filters:
            # ...and then rewrite the path to force the WS protocol.
            # This explicitly tells the gateway to forward to a WebSocket endpoint.
            - name: RewritePath
              args:
                regexp: "/ws/(?<segment>.*)"
                replacement: "/ws/${segment}"

        - id: chat-service-rest
          uri: lb://CHAT-SERVICE
          predicates:
            - Path=/api/chat/**

eureka:
  instance:
    hostname: localhost
    prefer-ip-address: false
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka

jwt:
  secret: ${jwt.secret}

logging:
  level:
    org.springframework.cloud.gateway: TRACE
    reactor.netty.http.client: TRACE